&ACCESS RVP
&PARAM EDITMASK = *
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
DEF sort( )
   
   DECL BOOL api_call_success
   DECL FRAME pick_frame
   DECL INT product_index
   DECL INT class_index
   
   ;FOLD INI;%{PE}
      ;FOLD BASISTECH INI
         GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
         INTERRUPT ON 3 
         BAS (#INITMOV,0 )
      ;ENDFOLD (BASISTECH INI)
      ;FOLD USER INI
         ;Make your modifications here
         pick_frame = $NULLFRAME
         product_index = -1
         class_index = -1
      ;ENDFOLD (USER INI)
   ;ENDFOLD (INI)
   
   BAS(#INITMOV, 0)
   $OUT[1] = TRUE
   $TOOL = TOOL_DATA[1]
   
   ; SAK
   PTP PICK_HOME
   
   ; load configuration
   api_call_success = load_configuration("63fcc44d2cec3500131af42f", "votenet")
   IF NOT api_call_success THEN
      HALT
   ENDIF
   
   ; retry detection loop
   LOOP
      
      ; with first/failed attempt, we need to trigger synchronously
      api_call_success = trigger(FALSE)
      
      ; async pick & place loop
      LOOP
         
         ; get next detection, timeout after 10s
         api_call_success = get_pose(pick_frame, product_index, class_index, "votenet", 10)
         ; no more detections, break out into outer image capture loop
         IF NOT api_call_success THEN
            EXIT
         ENDIF
                  
         ; all detections are relative to camera base obtained from hand-eye calib
         $BASE = BASE_DATA[1]
         
         ; more to pe-position defined in web GUI
         PTP pick_frame
         
         ; pick up
         LIN_REL {Z 300} #TOOL
         $OUT[1] = FALSE
         LIN_REL {Z -300} #TOOL
                  
         ; trigger capture and evaluation for the next cycle, no need to wait for capture to 
         ; finish when camera is not mounted on-arm
         api_call_success = trigger(FALSE)
         
         SWITCH product_index
            CASE 0
               ; do smomething with the item based on product index               
            DEFAULT
         ENDSWITCH
         
         ; move home before picking next item to avoid collisions
         PTP PICK_HOME
         
      ENDLOOP
            
   ENDLOOP   

END

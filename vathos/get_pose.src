&ACCESS RVO
&PARAM EDITMASK = *
DEFFCT BOOL get_pose(pick_frame: OUT, product: OUT, class: OUT, workflow: IN, timeout: IN)
   
   DECL INT timeout
   DECL CHAR workflow[]
   DECL EKI_STATUS ret
   DECL INT status
   DECL REAL detection[8]
   DECL FRAME pick_frame
   DECL INT product
   DECL INT class
   DECL INT i
   
   ; init
   status = 3
   FOR i=1 TO 8
      detection[i] = 0.0
   ENDFOR
   
   ; open network socket
   ret = EKI_Init("get_pose")
   ret = EKI_Open("get_pose")
   WAIT FOR $FLAG[10]
   
   ; assemble the XML message
   ret = EKI_SetString("get_pose", "request/method", "get_pose")
   ret = EKI_SetString("get_pose", "request/params/workflow/type", "string")
   ret = EKI_SetString("get_pose", "request/params/workflow/value", workflow[])
   ret = EKI_SetString("get_pose", "request/params/representation/type", "string")
   ret = EKI_SetString("get_pose", "request/params/representation/value", "ZYX")
   ret = EKI_SetString("get_pose", "request/params/degrees/type", "bool")
   ret = EKI_SetBool("get_pose", "request/params/degrees/value", TRUE)
   ret = EKI_SetString("get_pose", "request/params/pipeline_timeout/type", "int")
   ret = EKI_SetInt("get_pose", "request/params/pipeline_timeout/value", timeout)

   ; send the request
   ret = EKI_Send("get_pose", "request")

   ; wait for status
   WAIT FOR $FLAG[1]
   ret = EKI_GetInt("get_pose", "response/status", status)   
   
   ; close connection and return on error
   IF status>0 THEN
      ; close network socket
      ret = EKI_Close("get_pose")
      ret = EKI_Clear("get_pose")
      RETURN FALSE   
   ENDIF
   
   ; parse the received frame
   WAIT FOR $FLAG[2]
   ret = EKI_GetRealArray("get_pose", "response/params/param", detection[])
   
   ; no more detections are indicated by negative class index
   IF detection[7]<0 THEN
      ; close network socket
      ret = EKI_Close("get_pose")
      ret = EKI_Clear("get_pose")
      RETURN FALSE 
   ENDIF

   ; KUKA poses are in mm
   pick_frame.X = detection[1] * 1000
   pick_frame.Y = detection[2] * 1000
   pick_frame.Z = detection[3] * 1000
   pick_frame.A = detection[4]
   pick_frame.B = detection[5]
   pick_frame.C = detection[6]
   class = detection[7]
   product = detection[8]
   
   ; close network socket
   ret = EKI_Close("get_pose")
   ret = EKI_Clear("get_pose")
   
   RETURN TRUE

ENDFCT